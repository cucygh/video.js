// https://github.com/sass/sass/issues/659#issuecomment-64819075
.video-js * {
      font-smoothing:antialiased;
      -ms-font-smoothing:antialiased;   /* IE 9 */
      -moz-font-smoothing:antialiased;  /* Firefox */
      -webkit-font-smoothing:antialiased; /* Safari 和 Chrome */
      -o-font-smoothing:antialiased;  /* Opera */
}
@function char($character-code) {
  @if function-exists("selector-append") {
    @return unquote("\"\\#{$character-code}\"");
  }

  @return str-slice("\x", 1, 1) + $character-code;
}

$tt-icon-font-family: iconfont;
$tt-icon-font-path: 'font' !default;

@font-face {
  font-family: $tt-icon-font-family;
  src: url('#{$tt-icon-font-path}/iconfont.eot'); /* IE9*/
  src: url('#{$tt-icon-font-path}/iconfont.eot?#iefix') format('embedded-opentype'); /* IE6-IE8 */
}

@font-face {
  font-family: $tt-icon-font-family;
  src: url('#{$tt-icon-font-path}/iconfont.woff') format('woff'), /* chrome、firefox */
    url('#{$tt-icon-font-path}/iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/
    url('#{$tt-icon-font-path}/iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */
}


// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps
$icons: (
          play: 'e65d',
          play-circle: 'f102',
          pause: 'e65f',
          volume-mute: 'e65b',
          volume-low: 'e659',
          volume-mid: 'e65a',
          volume-high: 'e658',
          fullscreen-enter: 'e657',
          fullscreen-exit: 'e65e',
);

// NOTE: This is as complex as we want to get with SCSS functionality.
//
// Now that we have a map of icons above, we can iterate over that map and create an icon class
// for each icon in that list. The iterator below produces CSS classes like this:
//
// .vjs-icon-play {
//   font-family: VideoJS;
//   font-weight: normal;
//   font-style: normal;
// }
// .vjs-icon-play:before { content: "\25b6"; }
//
// We can then use @extend in the codebase when we need to add an icon to a class. @extend builds up
// the selectors for you so you can avoid duplication. This is generally a bad idea, but since each
// icon should only be extended one or two other places, we'll roll with it.
@each $name, $content in $icons {
  .vjs-icon-#{$name} {
    font-family: $tt-icon-font-family;
    font-weight: normal;
    font-style: normal;

    &:before {
      font-family: $tt-icon-font-family;
      content: char($content);
    }
  }
}
